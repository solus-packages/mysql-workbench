diff --git a/backend/wbprivate/workbench/wb_context.cpp b/backend/wbprivate/workbench/wb_context.cpp
index 82c0fa6..d521d71 100644
--- a/backend/wbprivate/workbench/wb_context.cpp
+++ b/backend/wbprivate/workbench/wb_context.cpp
@@ -3030,27 +3030,6 @@ std::shared_ptr<SqlEditorForm> WBContext::add_new_query_window(const db_mgmt_Con
 
     form = get_sqlide_context()->create_connected_editor(target);
 
-    if (form->connection_details().find("dbmsProductVersion") != form->connection_details().end()) {
-      // check that we're connecting to a known and supported version of the server
-      if (!bec::is_supported_mysql_version(form->connection_details()["dbmsProductVersion"])) {
-        logError("Unsupported server version: %s %s\n", form->connection_details()["dbmsProductName"].c_str(),
-                 form->connection_details()["dbmsProductVersion"].c_str());
-
-        if (mforms::Utilities::show_warning(
-              base::strfmt("Connection Warning (%s)", targetConnection->name().c_str()),
-              base::strfmt(
-                "Incompatible/nonstandard server version or connection protocol detected (%s).\n\n"
-                "A connection to this database can be established but some MySQL Workbench features may not work "
-                "properly since the database is not fully compatible with the supported versions of MySQL.\n\n"
-                "MySQL Workbench is developed and tested for MySQL Server versions 5.1, 5.5, 5.6 and 5.7",
-                bec::sanitize_server_version_number(form->connection_details()["dbmsProductVersion"]).c_str()),
-              "Continue Anyway", "Cancel") != mforms::ResultOk) {
-          _frontendCallbacks->show_status_text(_("Unsupported server"));
-          return SqlEditorForm::Ref();
-        }
-      }
-    }
-
     save_connections(); // lastConnected time changed (and potentially the serverVersion).
   } catch (grt::user_cancelled &e) {
     if (target.is_valid())
